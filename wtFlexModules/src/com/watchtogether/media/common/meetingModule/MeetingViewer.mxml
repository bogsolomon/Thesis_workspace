<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   layout="absolute" width="596" height="334"
		   creationComplete="creationCompleteHandler(event)"
		   xmlns:controller="com.watchtogether.media.common.meetingModule.controller.*">
	<fx:Declarations>
		<controller:MeetingController id="controller" view="{this}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.watchtogether.code.MainApplication;
			import com.watchtogether.media.common.meetingModule.consts.MeetingAppConstants;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			[Bindable]
			private var meetingList:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				var xmlServ:HTTPService = new HTTPService();
				xmlServ.url = MeetingAppConstants.MEETING_LIST+MainApplication.instance.login.loggedInUser.uid;
				xmlServ.addEventListener(ResultEvent.RESULT, readMeetingList);
				xmlServ.addEventListener(FaultEvent.FAULT, readFail);
				xmlServ.send();
				
				if (MainApplication.instance.login.getDefaultRoomName().indexOf("Meeting")!=-1) {
					leaveButton.enabled = true;
				}
			}
			
			private function readFail(evt:FaultEvent):void {
				Alert.show(evt.fault.faultString, 'Failure');
			}
			
			private function readMeetingList(evt:ResultEvent):void {
				var obj:Object = evt.result.meetings;
				if (obj != null) {
					if(obj.meeting is ArrayCollection) {
						var meetings:ArrayCollection = obj.meeting;
						
						for each(var meetingObj:Object in meetings) {
							var meeting:Meeting = new Meeting(new Number(meetingObj.meetingId), meetingObj.meetingName, meetingObj.passKey, meetingObj.url, meetingObj.dateStart, meetingObj.creatorId);
							meetingList.addItem(meeting);
						}
					} else if (obj.meeting != null) {
						meetingObj = obj.meeting ;
						meeting = new Meeting(new Number(meetingObj.meetingId), meetingObj.meetingName, meetingObj.passKey, meetingObj.url, meetingObj.dateStart, meetingObj.creatorId);
						meetingList.addItem(meeting);
					}
				}
			}
			
			protected function hourstepper_changeHandler(event:Event):void
			{
				if (hourStepper.value == 24) {
					minStepper.value = 0;
					minStepper.enabled = false;
				} else {
					minStepper.enabled = true;
				}
			}
			
			protected function create_clickHandler(event:MouseEvent):void
			{
				var xmlServ:HTTPService = new HTTPService();
				xmlServ.url = MeetingAppConstants.MEETING_CREATE+MainApplication.instance.login.loggedInUser.uid;
				xmlServ.url = xmlServ.url + MeetingAppConstants.SEPARATOR+MeetingAppConstants.MEETING_NAME_PARAM+nameTF.text;
				xmlServ.url = xmlServ.url + MeetingAppConstants.SEPARATOR+MeetingAppConstants.PASSKEY_PARAM+passKeyTF.text;
				
				var selectedDate:Date = dateField.selectedDate;
				var date:String = selectedDate.fullYear+"/"+(selectedDate.month +1)+"/"+selectedDate.date;
				date = date + " "+hourStepper.value+":"+minStepper.value;
				
				xmlServ.url = xmlServ.url + MeetingAppConstants.SEPARATOR+MeetingAppConstants.DATE_PARAM+date;
				xmlServ.addEventListener(ResultEvent.RESULT, createMeetingList);
				xmlServ.addEventListener(FaultEvent.FAULT, readFail);
				xmlServ.send();
			}
			
			private function createMeetingList(evt:ResultEvent):void {
				var status:Object = evt.result.status;
				
				if (status.error != null) {
					Alert.show(status.error, 'Failure');
				} else {
					var meetingObj:Object = status.meeting;
					var meeting:Meeting = new Meeting(new Number(meetingObj.meetingId), meetingObj.meetingName, meetingObj.passKey, meetingObj.url, meetingObj.dateStart, meetingObj.creatorId);
					meetingList.addItem(meeting);
					Alert.show('Meeting created', 'Success');
				}
			}
			
			protected function dateField_openHandler(event:DropdownEvent):void
			{
				controller.blockHide = true;
				dateField.addEventListener(CalendarLayoutChangeEvent.CHANGE, unblockHide);
			}
			
			private function unblockHide(event:CalendarLayoutChangeEvent):void {
				controller.blockHide = false;
			}
			
			protected function join_clickHandler(event:MouseEvent):void
			{
				if (meetingListDG.selectedIndex != -1) {
					var selectedMeeting:Meeting = meetingListDG.selectedItem as Meeting;
					MainApplication.instance.leaveSession();
					if (MainApplication.instance.login.loggedInUser.uid == selectedMeeting.creatorId) {
						MainApplication.instance.login.loggedInUser.forceBossThisUser = true;
					} else {
						MainApplication.instance.login.loggedInUser.forceBossThisUser = false;
					}
					
					MainApplication.instance.mediaServerConnection.call("joinRoom", null, "Meeting-"+selectedMeeting.meetingId, MainApplication.instance.login.loggedInUser.forceBossThisUser);
					
					leaveButton.enabled = true;
				}
			}
			
			protected function leave_clickHandler(event:MouseEvent):void
			{
				var selectedMeeting:Meeting = meetingListDG.selectedItem as Meeting;
				MainApplication.instance.leaveSession();
				MainApplication.instance.mediaServerConnection.call("joinRoom", null, "UserRoom-"+MainApplication.instance.login.loggedInUser.uid, true);
				leaveButton.enabled = false;
				MainApplication.instance.login.loggedInUser.forceBossThisUser = false;
			}
			
		]]>
	</fx:Script>
	<mx:TabNavigator width="100%" height="100%" id="accordion">
		<s:NavigatorContent label="Meetings" width="100%">
			<s:List dataProvider="{meetingList}" width="100%" height="90%" id="meetingListDG" itemRenderer="com.watchtogether.media.common.meetingModule.MeetingItemRenderer">
				
			</s:List>
			<!--mx:DataGrid dataProvider="{meetingList}" width="100%" editable="true" height="90%" id="meetingListDG">
				<mx:columns>
					<mx:DataGridColumn dataField="meetingName" headerText="Name" editable="false" width="22"/>
					<mx:DataGridColumn dataField="meetingPassKey" headerText="Pass Key" editable="false" width="22"/>
					<mx:DataGridColumn dataField="meetingUrl" headerText="URL" editable="true"/>
					<mx:DataGridColumn dataField="dateStart" headerText="Date Start" editable="false" width="40"/>
				</mx:columns> 
			</mx:DataGrid-->
			<s:Button x="11" y="274" label="Join Meeting" click="join_clickHandler(event)"/>
			<s:Button x="110" y="274" label="Leave Meeting" click="leave_clickHandler(event)" enabled="false" id="leaveButton"/>
		</s:NavigatorContent>
		<s:NavigatorContent label="New Meeting" width="100%">
			<s:Label x="10" y="10" text="Meeting Name:"/>
			<s:Label x="10" y="41" text="Meeting PassKey:"/>
			<s:Label x="10" y="74" text="Meeting Date:"/>
			<s:TextInput x="120" y="6" id="nameTF"/>
			<s:TextInput x="120" y="36" id="passKeyTF"/>
			<mx:DateField x="120" y="66" width="128" enabled="true" id="dateField" open="dateField_openHandler(event)"/>
			<s:Label x="265" y="74" text="H"/>
			<s:NumericStepper x="279" y="66" maximum="24" minimum="0" stepSize="1" change="hourstepper_changeHandler(event)" id="hourStepper"/>
			<s:Label x="340" y="74" text="M"/>
			<s:NumericStepper x="354" y="66" maximum="59" minimum="0" stepSize="1" id="minStepper"/>
			<s:Button x="237" y="118" label="Create" click="create_clickHandler(event)"/>
		</s:NavigatorContent>
	</mx:TabNavigator>
</mx:Module>
